// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.Text
    access_token      String? @map("accessToken") @db.Text
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken") @db.Text
    session_state     String? @map("sessionState")
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("sessions")
}

model User {
    id             String               @id @default(cuid())
    penname        String?              @unique
    name           String?
    email          String?              @unique
    emailVerified  DateTime?
    image          String?
    wallpaperImage String?
    coin           Int                  @default(0)
    bio            String               @default("")
    accounts       Account[]
    sessions       Session[]
    categories     CategoriesOnUsers[]
    following      FollowingFollower[]  @relation("following")
    followers      FollowingFollower[]  @relation("followers")
    ownedBooks     BookOwner[]
    favorites      FavoriteBook[]
    ownedChapters  Chapter[]
    likedChapters  ChapterLike[]
    comments       ChapterComment[]
    likedComments  ChapterCommentLike[]

    @@map("users")
}

model FollowingFollower {
    following   User     @relation("followers", fields: [followingId], references: [id])
    followingId String
    follower    User     @relation("following", fields: [followerId], references: [id])
    followerId  String
    createdAt   DateTime @default(now())

    @@id([followingId, followerId])
    @@index([followerId])
    @@index([followingId])
    @@map("followingFollowers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationTokens")
}

model Category {
    id    String              @id @default(cuid())
    title String
    users CategoriesOnUsers[]
    books BookCategory[]

    @@map("categories")
}

model CategoriesOnUsers {
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    createdAt  DateTime @default(now())

    @@id([categoryId, userId])
    @@index([userId])
    @@index([categoryId])
    @@map("categoriesOnUsers")
}

enum BookStatus {
    INITIAL
    DRAFT
    PUBLISHED
    COMPLETED
    ARCHIVED
}

model Book {
    id             String         @id @default(cuid())
    title          String
    description    String?
    status         BookStatus     @default(INITIAL)
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    coverImage     String?
    wallpaperImage String?
    owners         BookOwner[]
    categories     BookCategory[]
    favoritees     FavoriteBook[]
    chapters       Chapter[]

    @@map("books")
}

enum BookOwnerStatus {
    OWNER
    INVITEE
    COLLABORATOR
    REJECTED
}

model BookOwner {
    book      Book            @relation(fields: [bookId], references: [id])
    bookId    String
    user      User            @relation(fields: [userId], references: [id])
    userId    String
    status    BookOwnerStatus
    createdAt DateTime        @default(now())

    @@id([bookId, userId])
    @@index([userId])
    @@index([bookId])
    @@map("bookOwners")
}

model BookCategory {
    book       Book     @relation(fields: [bookId], references: [id])
    bookId     String
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    @@id([bookId, categoryId])
    @@index([categoryId])
    @@index([bookId])
    @@map("bookCategories")
}

model FavoriteBook {
    book      Book     @relation(fields: [bookId], references: [id])
    bookId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@id([bookId, userId])
    @@index([userId])
    @@index([bookId])
    @@map("favoriteBooks")
}

model Chapter {
    id          String           @id @default(cuid())
    title       String
    content     Json
    views       Int              @default(0)
    publishedAt DateTime?
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    book        Book?            @relation(fields: [bookId], references: [id])
    bookId      String?
    owner       User             @relation(fields: [ownerId], references: [id])
    ownerId     String
    likes       ChapterLike[]
    comments    ChapterComment[]

    @@index([ownerId])
    @@index([bookId])
    @@map("chapters")
}

model ChapterLike {
    chapter   Chapter  @relation(fields: [chapterId], references: [id])
    chapterId String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@id([chapterId, userId])
    @@index([userId])
    @@index([chapterId])
    @@map("chapterLikes")
}

model ChapterComment {
    id              String               @id @default(cuid())
    image           String?
    content         String
    createdAt       DateTime             @default(now())
    updatedAt       DateTime             @updatedAt
    chapter         Chapter              @relation(fields: [chapterId], references: [id])
    chapterId       String
    user            User                 @relation(fields: [userId], references: [id])
    userId          String
    replies         ChapterComment[]     @relation("replies")
    parent          ChapterComment?      @relation("replies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentCommentId String?
    likes           ChapterCommentLike[]

    @@index([userId])
    @@index([chapterId])
    @@index([parentCommentId])
    @@map("chapterComments")
}

model ChapterCommentLike {
    comment   ChapterComment @relation(fields: [commentId], references: [id])
    commentId String
    user      User           @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime       @default(now())

    @@id([commentId, userId])
    @@index([userId])
    @@index([commentId])
    @@map("chapterCommentLikes")
}
