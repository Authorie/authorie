// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgres"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.Text
    access_token      String? @map("accessToken") @db.Text
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken") @db.Text
    session_state     String? @map("sessionState")
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String              @id @default(cuid())
    name          String?
    email         String?             @unique
    emailVerified DateTime?
    image         String?
    coin          Int                 @default(0)
    accounts      Account[]
    sessions      Session[]
    categories    CategoriesOnUsers[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationTokens")
}

model Category {
    id    String              @id @default(cuid())
    name  String
    users CategoriesOnUsers[]

    @@map("categories")
}

model CategoriesOnUsers {
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    createdAt  DateTime @default(now())

    @@id([categoryId, userId])
    @@map("categoriesOnUsers")
}
